{
  "exercises": [
    {
      "id": "E1",
      "title": "Tienda Musical",
      "description": "Modelar una tienda de articulos musicales.",
      "classes": [
        {
          "title": "Cliente",
          "description": "Completar el codigo de la clase Cliente.",
          "file": "./TiendaMusical/Cliente.java",
          "dependencies":[
           
          ],
          "test_cases": [
            {
                "input": "Cliente cliente = new Cliente(25, \"Juan\");\nSystem.out.println(cliente.getNombre());",
                "expected_output": "Juan"
            }
          ]
        },
        {
          "title": "Disco",
          "description": "Completar el codigo de la clase Disco.",
          "file": "./TiendaMusical/Disco.java",
          "dependencies":[
            "./TiendaMusical/Dependencies/Producto.js"
          ],
          "test_cases": [
            {
                "input": "Disco disco = new Disco(\"TTT5\", \"Woman\", 200, \"The Beathles\", 2000);\nSystem.out.println(disco.getTitulo());",
                "expected_output": "Woman"
            }
          ]
        }
      ]
    },
    {
      "id": "E2",
      "title": "Veterinaria",
      "description": "Modelar una veterinaria.",
      "classes": [
        {
          "title": "Animal",
          "description": "Completar el codigo de la clase Animal.",
          "file": "./Veterinaria/Animal.java",
          "dependencies": [],
          "test_cases": [
            {
              "input": "Animal animal = new Animal(\"Max\", 3);\nanimal.añadirVacuna(\"Rabia\");\nArrayList<Vacuna> tieneVacunas = animal.getVacunas();\nSystem.out.println(tieneVacunas.contains(\"Rabia\"));",
              "expected_output": "true"
            },
            {
              "input": "Animal animal = new Animal(\"Luna\", 5);\nSystem.out.println(animal.getEdad());",
              "expected_output": "5"
            },
            {
              "input": "Animal animal = new Animal(\"Bella\", 2);\nanimal.setEdad(3);\nSystem.out.println(animal.getEdad());",
              "expected_output": "3"
            },
            {
              "input": "Animal animal = new Animal(\"Lucas\", 5);\nanimal.añadirVacuna(\"Ravia\");\nanimal.añadirVacuna(\"Ravia\");\nanimal.añadirVacuna(\"Moquillo\");\nint cantidadVacunas = animal.getVacunas().size();\nSystem.out.println(cantidadVacunas);",
              "expected_output": "2"
            }
          ]
        },
        {
          "title": "Gato",
          "description": "Completar el codigo de la clase Gato.",
          "file": "./Veterinaria/Gato.java",
          "dependencies": [
            "./Veterinaria/Dependencies/Animal.js",
            "./Veterinaria/Dependencies/TipoAnimal.js"
          ],
          "test_cases": [
            {
              "input": "Gato gato = new Gato(\"Milo\", 4, \"Negro\");\ngato.añadirJuguete(\"Ratón\");\nArrayList<Juguete> juguetes = gato.getJuguetesFavoritos()\nSystem.out.println(juguetes.contains(\"Ratón\"));",
              "expected_output": "true"
            },
            {
              "input": "Gato gato = new Gato(\"Luna\", 8, \"Blanco\");\nSystem.out.println(gato.esMayor());",
              "expected_output": "true"
            },
            {
              "input": "Gato gato = new Gato(\"Simba\", 2, \"Naranja\");\nSystem.out.println(gato.getTipo());",
              "expected_output": "GATO"
            }
          ]
        },
        {
          "title": "Perro",
          "description": "Completar el codigo de la clase Perro.",
          "file": "./Veterinaria/Perro.java",
          "dependencies": [
            "./Veterinaria/Dependencies/Animal.js",
            "./Veterinaria/Dependencies/TipoAnimal.js",
            "./Veterinaria/Dependencies/NivelEntrenamiento.js"
          ],
          "test_cases": [
            {
              "input": "Perro perro = new Perro(\"Rocky\", 3, \"Labrador\", 8);\nperro.añadirEntrenamiento(\"Sentado\", NivelEntrenamiento.BASICO);\nSystem.out.println(perro.getEntrenamientos().containsKey(\"Sentado\"));",
              "expected_output": "true"
            },
            {
              "input": "Perro perro = new Perro(\"Max\", 5, \"Chihuahua\", 4);\nSystem.out.println(perro.calcularComidaDiaria());",
              "expected_output": "50"
            },
            {
              "input": "Perro perro = new Perro(\"Bella\", 2, \"Golden\", 12);\nSystem.out.println(perro.getTipo());",
              "expected_output": "PERRO"
            }
          ]
        },
        {
          "title": "Cliente",
          "description": "Completar el codigo de la clase Cliente.",
          "file": "./Veterinaria/Cliente.java",
          "dependencies": [
            "./Veterinaria/Dependencies/Animal.js",
            "./Veterinaria/Dependencies/TipoAnimal.js",
            "./Veterinaria/Dependencies/Gato.js"
          ],
          "test_cases": [
            {
              "input": "Cliente cliente = new Cliente(\"C001\", \"Juan\");\ncliente.registrarMascota(new Gato(\"Milo\", 3, \"Gris\"));\nSystem.out.println(cliente.getMascotas().containsKey(\"Milo\"));",
              "expected_output": "true"
            },
            {
              "input": "Cliente cliente = new Cliente(\"C003\", \"Carlos\");\nSystem.out.println(cliente.getNombre());",
              "expected_output": "Carlos"
            }
          ]
        },
        {
          "title": "Veterinaria",
          "description": "Completar el codigo de la clase Veterinaria.",
          "file": "./Veterinaria/Veterinaria.java",
          "dependencies": [
            "./Veterinaria/Dependencies/Cliente.js"
          ],
          "test_cases": [
            {
              "input": "Veterinaria vet = new Veterinaria(\"PetCare\");\nvet.añadirCliente(new Cliente(\"C001\", \"Juan\"));\nSystem.out.println(vet.getClientes().size());",
              "expected_output": "1"
            },
            {
              "input": "Veterinaria vet = new Veterinaria(\"AnimalHealth\");\nvet.actualizarStock(\"Paracetamol\", 50);\nSystem.out.println(vet.getStockMedicamentos().containsKey(\"Paracetamol\"));",
              "expected_output": "true"
            },
            {
              "input": "Veterinaria vet = new Veterinaria(\"PetFriends\");\nSystem.out.println(vet.getNombre());",
              "expected_output": "PetFriends"
            }
          ]
        }
      ]
    },
    {
      "id": "E3",
      "title": "Sistema de Gestión de Aeropuerto",
      "description": "Modelar un sistema de gestión para un aeropuerto con aeronaves, vuelos y pasajeros.",
      "classes": [
        {
          "title": "Aeronave",
          "description": "Completar el código de la clase abstracta Aeronave con sus métodos abstractos y concretos.",
          "file": "./Aeropuerto/Aeronave.java",
          "dependencies": [
            "./Aeropuerto/Dependencies/AvionComercial.java"
          ],
          "test_cases": [
            {
              "input": "AvionComercial avion = new AvionComercial(\"MAT-001\", \"Boeing 737\", 150, 5000, 6, true);\nSystem.out.println(avion.getModelo());",
              "expected_output": "Boeing 737"
            },
            {
              "input": "AvionComercial avion = new AvionComercial(\"MAT-001\", \"Boeing 737\", 150, 5000, 6, true);\nSystem.out.println(avion.puedeVolar(4000));",
              "expected_output": "true"
            }
          ]
        },
        {
          "title": "AvionComercial",
          "description": "Completar el código de la clase AvionComercial que hereda de Aeronave.",
          "file": "./Aeropuerto/AvionComercial.java",
          "dependencies": [
            "./Aeropuerto/Aeronave.java"
          ],
          "test_cases": [
            {
              "input": "AvionComercial avion = new AvionComercial(\"MAT-001\", \"Boeing 737\", 150, 5000, 6, true);\navion.agregarServicio(\"WiFi\");\nSystem.out.println(avion.getServiciosABordo().size());",
              "expected_output": "1"
            },
            {
              "input": "AvionComercial avion = new AvionComercial(\"MAT-001\", \"Boeing 737\", 150, 5000, 6, true);\nSystem.out.println(avion.calcularConsumoCombustible());",
              "expected_output": "65.0"
            }
          ]
        },
        {
          "title": "Vuelo",
          "description": "Completar el código de la clase Vuelo que gestiona pasajeros y aeronaves.",
          "file": "./Aeropuerto/Vuelo.java",
          "dependencies": [
            "./Aeropuerto/Aeronave.java",
            "./Aeropuerto/AvionComercial.java",
            "./Aeropuerto/Pasajero.java",
            "./Aeropuerto/EstadoVuelo.java",
            "./Aeropuerto/VueloLlenoException.java"
          ],
          "test_cases": [
            {
              "input": "AvionComercial avion = new AvionComercial(\"MAT-001\", \"Boeing 737\", 150, 5000, 6, true);\nVuelo vuelo = new Vuelo(\"VL-101\", \"CIUDAD A\", \"CIUDAD B\", LocalDateTime.now(), LocalDateTime.now().plusHours(2), avion);\nSystem.out.println(vuelo.getCodigoVuelo());",
              "expected_output": "VL-101"
            },
            {
              "input": "AvionComercial avion = new AvionComercial(\"MAT-001\", \"Boeing 737\", 1, 5000, 6, true);\nVuelo vuelo = new Vuelo(\"VL-101\", \"CIUDAD A\", \"CIUDAD B\", LocalDateTime.now(), LocalDateTime.now().plusHours(2), avion);\nPasajero p1 = new Pasajero(\"PAS001\", \"Juan\", \"MX\");\nPasajero p2 = new Pasajero(\"PAS002\", \"Maria\", \"US\");\nvuelo.agregarPasajero(p1);\ntry {\n\tvuelo.agregarPasajero(p2);\n} catch (VueloLlenoException e) {\n\tSystem.out.println(\"Error\");\n}",
              "expected_output": "Error"
            }
          ]
        },
        {
          "title": "Aeropuerto",
          "description": "Completar el código de la clase Aeropuerto que implementa ServiciosAeroportuarios.",
          "file": "./Aeropuerto/Aeropuerto.java",
          "dependencies": [
            "./Aeropuerto/ServiciosAeroportuarios.java",
            "./Aeropuerto/Vuelo.java",
            "./Aeropuerto/Aeronave.java",
            "./Aeropuerto/ServicioPremium.java",
            "./Aeropuerto/AvionComercial.java"
          ],
          "test_cases": [
            {
              "input": "Aeropuerto aeropuerto = new Aeropuerto(\"Internacional\", \"INT\", \"Ciudad\");\nAvionComercial avion = new AvionComercial(\"MAT-001\", \"Boeing 737\", 150, 5000, 6, true);\naeropuerto.registrarAeronave(avion);\nSystem.out.println(aeropuerto.getAeronaves().size());",
              "expected_output": "1"
            },
            {
              "input": "Aeropuerto aeropuerto = new Aeropuerto(\"Internacional\", \"INT\", \"Ciudad\");\nAvionComercial avion = new AvionComercial(\"MAT-001\", \"Boeing 737\", 150, 5000, 6, true);\nVuelo vuelo = new Vuelo(\"VL-101\", \"A\", \"B\", LocalDateTime.now(), LocalDateTime.now().plusHours(2), avion);\naeropuerto.programarVuelo(vuelo);\naeropuerto.asignarPuertaEmbarque(\"VL-101\", 5);\nSystem.out.println(aeropuerto.obtenerVuelosPorPuerta(5).size());",
              "expected_output": "1"
            }
          ]
        },
        {
          "title": "VueloLlenoException",
          "description": "Completar el código de la excepción personalizada VueloLlenoException.",
          "file": "./Aeropuerto/VueloLlenoException.java",
          "dependencies": [],
          "test_cases": [
            {
              "input": "try {\n\tthrow new VueloLlenoException(\"VL101\", 150);\n} catch (VueloLlenoException e) {\n\tSystem.out.println(e.getCodigoVuelo());\n}",
              "expected_output": "VL101"
            },
            {
              "input": "try {\n\tthrow new VueloLlenoException(\"VL101\", 150);\n} catch (VueloLlenoException e) {\n\tSystem.out.println(e.getMessage());\n}",
              "expected_output": "El vuelo VL101 está lleno. Capacidad máxima: 150"
            }
          ]
        }
      ],
      "additional_resources": [
        {
          "title": "EstadoVuelo",
          "description": "Enumeración de estados de vuelo",
          "file": "./Aeropuerto/EstadoVuelo.java"
        },
        {
          "title": "ServicioPremium",
          "description": "Enumeración de servicios premium",
          "file": "./Aeropuerto/ServicioPremium.java"
        },
        {
          "title": "ServiciosAeroportuarios",
          "description": "Interfaz de servicios del aeropuerto",
          "file": "./Aeropuerto/ServiciosAeroportuarios.java"
        },
        {
          "title": "Pasajero",
          "description": "Clase que representa a un pasajero",
          "file": "./Aeropuerto/Pasajero.java"
        }
      ]
    }
  ]
}
